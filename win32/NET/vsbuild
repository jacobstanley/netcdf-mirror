#!/bin/sh

sub extractfiles;
sub processfile;
sub generate;
sub genconfig;

sub build {
    my $m;
    my %noduplicates; # Temp to remove duplicate file names
    my @ghfiles; # global .h files
    my @gcfiles; # global .c files
    my @hfiles;
    my @cfiles;

    # The "global" project filelist contains files
    # that should be included everywhere
    @ghfiles=();
    @gcfiles=();
    extractfiles "global", \@ghfiles, \@gfiles;

    # create config.h from the ../../config.h
    genconfig;

    foreach $m (@projects) {
        @hfiles=();
        @cfiles=();
        if(! -e "$vsdir/$m.filelist") {next};
	extractfiles $m, \@hfiles, \@cfiles;
	# Prepend global lists
	@hfiles = (@ghfiles,@hfiles);
	@cfiles = (@gcfiles,@cfiles);
        if($debug > 0) {
	    print "$m.hfiles=@hfiles\n";
            print "$m.cfiles=@cfiles\n";
	}

	# create the .vcproj for each project
	generate $m, \@hfiles, \@cfiles;

    }
}

sub extractfiles {
    ($project, $href, $cref) = @_;
    @{$href}=();
    @{$cref}=();
    open MODFILE, "$vsdir/$project.filelist" || return;
    while(<MODFILE>) {
	processfile $_, $href, $cref;
    }
    close MODFILE;
    # Remove duplicates
    @{$href} = uniq(@{$href});
    @{$cref} = uniq(@{$cref});
}

sub processfile {
    ($line, $href, $cref) = @_;
    # remove any trailing newline
    $line =~ s/[\r\n]//g;
    if($debug > 2) {print "line=|$line|\n";}
    # separate out .h from .c files; convert .m4 to .c
    my $ext=$line;
    $ext=~s/^.*(\..*)/$1/;
    if ("$ext" eq ".h") {
	push(@{$href},"$line");
    } elsif ("$ext" eq ".c") {
	push(@{$cref},"$line");
    } elsif ("$ext" eq ".m4") {
	my $m4toc = $line;
	$m4toc =~ s/.m4/.c/;
	push(@{$cref},"$m4toc");
    } else {print "unknown file extension: |$ext| in |$line|\n";}
}

sub generate {
    ($project, $href, $cref) = @_;
    my @hfiles=@{$href};
    my @cfiles=@{$cref};
    my $projectdir=$projectmap{$project} || die "no projectdir";

    # use $project.template to produce $project.vcproj
    open TEMPLATE,  "<$vsdir/$projectdir/$project.template" || die "no template";
    open VCPROJ,  "+>$vsdir/$projectdir/$project.vcproj" || die "vcproj not writable";
print "processing $vsdir/$projectdir/$project.template =>$vsdir/$projectdir/$project.vcproj\n";
    while(<TEMPLATE>) {
	my $line=$_;
	# remove newlines and returns
	$line =~ s/[\r\n]+//g;
        if($line =~ m/^@[a-zA-Z0-9_]+@.*/ ) {
            my $param = $line;
            $param =~ s/^@([a-zA-Z0-9_]+)@/$1/;
            if($param eq "hfiles") {
		# Insert config.h as special case
                print VCPROJ "<File RelativePath=\"..\\config.h\"></File>\n";
                foreach (@hfiles) {
                    # convert / -> \
                    my $winfile=$_;
                    $winfile=~s|/|\\|g;
                    print VCPROJ "<File RelativePath=\"..\\..\\..\\$winfile\"></File>\n";
                }
            } elsif($param eq "cfiles") {
                foreach (@cfiles) {
                    # convert / -> \
                    my $winfile=$_;
                    $winfile=~s|/|\\|g;
                    print VCPROJ "<File RelativePath=\"..\\..\\..\\$winfile\"></File>\n";
                }
	    } else {die "Unknown parameter tag: $param";}
        } else {
	    # pass the line thru
	    print VCPROJ "$line\n";
        }
    }
    close VCPROJ;
    close TEMPLATE;
}

# Define forced config defines for windows
%forceddefines = (
"CRAY_STACKSEG_END" => "undef",
"C_ALLOCA" => "undef",
"DLL_NETCDF" => "undef",
"HAVE_ALLOCA" => "undef",
"HAVE_ALLOCA_H" => "undef",
"HAVE_CTYPE_H" => "define",
"HAVE_DECL_ISFINITE" => "undef",
"HAVE_DECL_ISINF" => "define",
"HAVE_DECL_ISNAN" => "define",
"HAVE_DECL_SIGNBIT" => "undef",
"HAVE_DIRENT_H" => "undef",
"HAVE_DLFCN_H" => "undef",
"HAVE_DOPRNT" => "undef",
"HAVE_ERRNO_H" => "undef",
"HAVE_FCNTL_H" => "define",
"HAVE_FSYNC" => "undef",
"HAVE_GETOPT_H" => "undef",
"HAVE_GETRLIMIT" => "undef",
"HAVE_GETTIMEOFDAY" => "undef",
"HAVE_INTTYPES_H" => "undef",
"HAVE_LOCALE_H" => "undef",
"HAVE_LONGLONG" => "undef",
"HAVE_ULONGLONG" => "undef",
"HAVE_ULONGLONG" => "undef",
"HAVE_MALLOC_H" => "define",
"HAVE_MEMORY_H" => "undef",
"HAVE_MKTEMP" => "undef",
"HAVE_NDIR_H" => "undef",
"HAVE_PTRDIFF_T" => "undef",
"HAVE_RPC_TYPES_H" => "undef",
"HAVE_RPC_XDR_H" => "undef",
"HAVE_SNPRINTF" => "define",
"HAVE_SSIZE_T" => "undef",
"HAVE_STDARG_H" => "define",
"HAVE_STDBOOL_H" => "undef",
"HAVE_STDINT_H" => "define",
"HAVE_STDLIB_H" => "define",
"HAVE_STRCASECMP" => "define",
"HAVE_STRCAT" => "define",
"HAVE_STRCHR" => "define",
"HAVE_STRCPY" => "define",
"HAVE_STRDUP" => "define",
"HAVE_STRERROR" => "define",
"HAVE_STRINGS_H" => "undef",
"HAVE_STRING_H" => "define",
"HAVE_STRLCAT" => "undef",
"HAVE_STRRCHR" => "define",
"HAVE_STRUCT_STAT_ST_BLKSIZE" => "undef",
"HAVE_ST_BLKSIZE" => "undef",
"HAVE_SYS_DIR_H" => "undef",
"HAVE_SYS_NDIR_H" => "undef",
"HAVE_SYS_RESOURCE_H" => "undef",
"HAVE_SYS_STAT_H" => "undef",
"HAVE_SYS_TIME_H" => "undef",
"HAVE_SYS_TYPES_H" => "undef",
"HAVE_SYS_WAIT_H" => "undef",
"HAVE_UCHAR" => "undef",
"HAVE_UNISTD_H" => "undef",
"HAVE_VPRINTF" => "define",
"HAVE__BOOL" => "undef",
"TIME_WITH_SYS_TIME" => "undef"
);

# Generate a usable config.h from ../../config.h
sub genconfig {
    open TOPCONFIG,  "<$topdir/config.h" || die "$topdir/config.h not writable";
    open CONFIG,  "+>$vsdir/config.h" || die "config.h not writable";
    print "processing $topdir/config.h =>$vsdir/config.h\n";
    while(<TOPCONFIG>) {
	my $line=$_;
	my $option = "";
	# remove newlines and returns
	$line =~ s/[\r\n]+//g;
	# Process relevant defines from config.h
       	if($line =~ m/^#[ ]*define[ ]+[a-zA-Z0-9_]+/) {
	    $option = $line;
	    $option =~ s/^#[ ]*define[ ]+([a-zA-Z0-9_]+).*$/$1/;
	} elsif($line =~ m|^/[*][ ]*#[ ]*undef[ ]+[a-zA-Z0-9_]+|) {
	    $option = $line;
	    $option =~ s|^/[*][ ]*#[ ]*undef[ ]+([a-zA-Z0-9_]+).*$|$1|;
        }
	if ("$option" ne "") {
	    my $def = "";
	    $def = ($forceddefines{$option} || "");
	    if($def eq "undef") {
		$line = "/* #undef $option */";
	    } elsif($def eq "define") {
		$line = "#define $option 1";
	    }
	}
	print CONFIG "$line\n";
    }
    # add some definitions
    print CONFIG "#ifndef longlong\n";
    print CONFIG "#define longlong LONGLONG\n";
    print CONFIG "#define ulonglong ULONGLONG\n";
    print CONFIG "#endif\n";

    close TOPCONFIG;
    close CONFIG;
}


1;
