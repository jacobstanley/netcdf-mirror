#!/bin/sh

sub extractfiles;
sub processfile;
sub generate;

sub build {
    my $m;
    my %noduplicates; # Temp to remove duplicate file names
    my @ghfiles; # global .h files
    my @gcfiles; # global .c files
    my @hfiles;
    my @cfiles;

    # The "global" project filelist contains files
    # that should be included everywhere
    @ghfiles=();
    @gcfiles=();
    if(-e "$vsdir/global.filelist") {
        extractfiles "global", \@ghfiles, \@gfiles;
        if($debug > 0) {
            print "global hfiles=@ghfiles\n";
            print "global cfiles=@gcfiles\n";
	}
    }

    foreach $m (@projects) {
        @hfiles=();
        @cfiles=();
        if(! -e "$vsdir/$m.filelist") {next};
	extractfiles $m, \@hfiles, \@cfiles;
	# Prepend global lists
	@hfiles = (@ghfiles,@hfiles);
	@cfiles = (@gcfiles,@cfiles);
        if($debug > 0) {
	    print "$m.hfiles=@hfiles\n";
            print "$m.cfiles=@cfiles\n";
	}

	# create the .vcproj for each project
	generate $m, \@hfiles, \@cfiles;
    }
}

sub extractfiles {
    ($project, $href, $cref) = @_;
    @{$href}=();
    @{$cref}=();
    open MODFILE, "$vsdir/$project.filelist" or die "$project.filelist does not exist";
    while(<MODFILE>) {
	processfile $_, $href, $cref;
    }
    close MODFILE;
    # Remove duplicates
    @{$href} = uniq(@{$href});
    @{$cref} = uniq(@{$cref});
}

sub processfile {
    ($line, $href, $cref) = @_;
    # remove any trailing newline
    $line =~ s/[\r\n]//g;
    if($debug > 2) {print "line=|$line|\n";}
    # separate out .h from .c files; convert .m4 to .c
    my $ext=$line;
    $ext=~s/^.*(\..*)/$1/;
    if ("$ext" eq ".h") {
	push(@{$href},"$line");
    } elsif ("$ext" eq ".c") {
	push(@{$cref},"$line");
    } elsif ("$ext" eq ".m4") {
	my $m4toc = $line;
	$m4toc =~ s/.m4/.c/;
	push(@{$cref},"$m4toc");
    } else {print "unknown file extension: |$ext| in |$line|\n";}
}

sub generate {
    ($project, $href, $cref) = @_;
    my @hfiles=@{$href};
    my @cfiles=@{$cref};
    my $projectdir=$projectmap{$project} || die "no projectdir";

    # use $project.template to produce $project.vcproj
    open TEMPLATE,  "<$vsdir/$projectdir/$project.template" || die "no template";
    open VCPROJ,  "+>$vsdir/$projectdir/$project.vcproj" || die "vcproj not writable";
print "processing $vsdir/$projectdir/$project.template =>$vsdir/$projectdir/$project.vcproj\n";
    while(<TEMPLATE>) {
	my $line=$_;
	# remove newlines and returns
	$line =~ s/[\r\n]+//g;
        if($line =~ m/^@[a-zA-Z0-9_]+@.*/ ) {
            my $param = $line;
            $param =~ s/^@([a-zA-Z0-9_]+)@/$1/;
            if($param eq "hfiles") {
                foreach (@hfiles) {
                    # convert / -> \
                    my $winfile=$_;
                    $winfile=~s|/|\\|g;
                    print VCPROJ "<File RelativePath=\"..\\..\\..\\$winfile\"></File>\n";
                }
            } elsif($param eq "cfiles") {
                foreach (@cfiles) {
                    # convert / -> \
                    my $winfile=$_;
                    $winfile=~s|/|\\|g;
                    print VCPROJ "<File RelativePath=\"..\\..\\..\\$winfile\"></File>\n";
                }
	    } else {die "Unknown parameter tag: $param";}
        } else {
	    # pass the line thru
	    print VCPROJ "$line\n";
        }
    }
    close VCPROJ;
    close TEMPLATE;
}

1;
